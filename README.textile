h1. Hearst Challenge

This project documents the participation of Jason Brownlee in the "Hearst Analytics Challenge":http://hearstchallenge.com/ in 2010.

h2. Overview

I originally was interested in participating in the Hearst Challenge. After writing some code and making some submissions I learned that the final submission problem is quite different to that of the verification problem. This coupled with my limited time (I'm trying to finish my "clever algorithms":http://www.cleveralgorithms.com book project), I have decided to stop participating in the competition and release all my code.

I expect that that sql and Java code in this project would provide a useful jumpstart to anyone looking to participate in the 2010 hearst challenge.

If you need some help to get up and running, you can contact me via email: jason.brownlee05@gmail.com 

Good luck

h2. Leaderboard Strategies

The following summarizes the simple strategies I tried for the leaderboard. At the time of writing I was sitting on the top of the leaderboard. Strategies are listed in order of increasing value/performance, and are cascaded to fill in any holes.

# Average sales for title/year/month
# Average sales for wholesaler/title/year/month
# Average sales for storetype/title/year/month
# Average sales for nearest neighbour stores (demographics)

Looking through the java code (/src) you'll see heaps of NN experiments. I did have all the results in a log file, but they're deleted now. Looking through the commit history of this readme file should show you some of the results.  

Note, my models are about as simple as you can get (first order) and generally not applicable to the final submission problem. 

h2. Code

This section summarizes the code.

* database - all the database/table creation scripts
* data - all the unzipped data files (download them yourself)
* analysis - early analysis ruby script (ignore it)
* dat - create this - holding location for data files created in a two-step submission process
* experiments - ruby scripts for preparing submission files with some of the simple strategies - slow and all written in java now so ignore them (unless your a ruby person).
* lib - some java libs needed for talking to the db and other
* submissions - create this, where submission files are put
* src - all the java code

h2. Getting Started

Following these instructions should get you a competitive score on the leaderboard - at least at the time of writing

Assumes a linux or mac environment with java and mysql. Note you'll need a lot of RAM and to tell the jvm about it (-Xmx) - I think I gave it 3GB - lazy code I know, but whatever. Also, the NN code is written for multicore, so specify the number of cores you have in the NearestNeighbourSales class.

# Acquire the code (git clone or press the download button)
# Install a mysql instance (other databases are likely to work)
# Build the database (lots of redundancy in my tables, hope you have lots of disk)
## cd database
## ./create_all.sh
# Create a NN dataset (com.cleveralgorithms.hearst.nn)
## BatchOffline - good for runing ad hoc off line test on a small piece of the 2009 data, just specify the model you want to try
## ImpTestNearestNeighbourSales - will crunch all the data and create a static NN dataset in the /dat directory  
# Create a submission file (com.cleveralgorithms.hearst.submission)
## GenerateSubmission - will generate a submission file for the leaderboard using a cascade of simple models.


h2.  Licenses

(c) Copyright 2010 Jason Brownlee. Some Rights Reserved.

<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/au/">
        <img alt="Creative Commons License" style="border-width:0" src="http://i.creativecommons.org/l/by-nc-sa/2.5/au/88x31.png" />
</a>

This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/2.5/au/">
Creative Commons Attribution-Noncommercial-Share Alike 2.5 Australia License</a>.
